(defvar *tokens* (make-hash-table :test 'equal))

(setf (gethash "and" *tokens*) "KW_AND")
(setf (gethash "or" *tokens*) "KW_OR")
(setf (gethash "not" *tokens*) "KW_NOT")
(setf (gethash "equal" *tokens*) "KW_EQUAL")
(setf (gethash "less" *tokens*) "KW_LESS")
(setf (gethash "nil" *tokens*) "KW_NIL")
(setf (gethash "list" *tokens*) "KW_LIST")
(setf (gethash "append" *tokens*) "KW_APPEND")
(setf (gethash "concat" *tokens*) "KW_CONCAT")
(setf (gethash "deffun" *tokens*) "KW_DEFFUN")
(setf (gethash "for" *tokens*) "KW_FOR")
(setf (gethash "if" *tokens*) "KW_IF")
(setf (gethash "exit" *tokens*) "KW_EXIT")
(setf (gethash "load" *tokens*) "KW_LOAD")
(setf (gethash "disp" *tokens*) "KW_DISP")
(setf (gethash "true" *tokens*) "KW_TRUE")
(setf (gethash "false" *tokens*) "KW_FALSE")

(setf (gethash "+" *tokens*) "OP_PLUS")
(setf (gethash "-" *tokens*) "OP_MINUS")
(setf (gethash "/" *tokens*) "OP_DIV")
(setf (gethash "*" *tokens*) "OP_MULT")
(setf (gethash "(" *tokens*) "OP_OP")
(setf (gethash ")" *tokens*) "OP_CP")
(setf (gethash "*" *tokens*) "OP_DBLMULT")
(setf (gethash "\"" *tokens*) "OP_OC")
(setf (gethash "\"" *tokens*) "OP_CC")
(setf (gethash "," *tokens*) "OP_COMMA")

(defvar *operators* (make-hash-table :test 'equal))
(setf (gethash #\+ *operators*) "OP_PLUS")
(setf (gethash #\- *operators*) "OP_MINUS")
(setf (gethash #\/ *operators*) "OP_DIV")
(setf (gethash #\* *operators*) "OP_MULT")
(setf (gethash #\( *operators*) "OP_OP")
(setf (gethash #\) *operators*) "OP_CP")
(setf (gethash #\* *operators*) "OP_DBLMULT")
(setf (gethash #\" *operators*) "OP_OC")
(setf (gethash #\" *operators*) "OP_CC")
(setf (gethash #\, *operators*) "OP_COMMA")